generator db {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String         @id @db.Uuid
  username              String?        @unique
  password              String?
  phoneNumber           String?        @unique @map("phone_number")
  isPhoneNumberVerified Boolean?       @map("is_phone_number_verified")
  email                 String?        @unique
  isEmailVerified       Boolean?       @map("is_email_verified")
  restaurants           Restaurant[]
  roles                 roles[]
  staff                 Staff[]
  userProfiles          UserProfiles[]

  @@map("users")
}

model roles {
  id     String  @id @db.Uuid
  userId String? @map("user_id") @db.Uuid
  role   Int?
  users  User?   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model UserProfiles {
  id       String  @id @db.Uuid
  userId   String? @map("user_id") @db.Uuid
  fullName String? @map("full_name")
  gender   Gender?
  bio      String? @db.Text
  users    User?   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("user_profiles")
}

enum Gender {
  male
  female
  other

  @@map("gender")
}

model Restaurant {
  id        String   @id @db.Uuid
  managerId String?  @map("manager_id") @db.Uuid
  name      String?
  slang     String?
  instagram String?
  telegram  String?
  twitter   String?
  youtube   String?
  eitaa     String?
  branches  Branch[]
  users     User?    @relation(fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("restaurants")
}

model Branch {
  id           String         @id @db.Uuid
  restaurantId String?        @map("restaurant_id") @db.Uuid
  iOpen        Boolean?       @map("is_open")
  status       String?
  rating       Int?
  showRating   Boolean?       @map("show_rating")
  instagram    String?
  telegram     String?
  twitter      String?
  youtube      String?
  eitaa        String?
  addresses    Address[]
  backlog      Backlog[]
  restaurants  Restaurant?    @relation(fields: [restaurantId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  menus        Menu[]
  openingTimes OpeningTimes[]
  staff        Staff[]

  @@map("branches")
}

model Staff {
  id       String  @id @db.Uuid
  userId   String? @map("user_id") @db.Uuid
  branchId String? @map("branch_id") @db.Uuid
  branches Branch? @relation(fields: [branchId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users    User?   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("staff")
}

model OpeningTimes {
  id       String  @id @db.Uuid
  branchId String? @map("branch_id") @db.Uuid
  sat      String?
  sun      String?
  mon      String?
  tue      String?
  wed      String?
  thu      String?
  fri      String?
  branches Branch? @relation(fields: [branchId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("opening_times")
}

model Address {
  id          String  @id @db.Uuid
  branchId    String? @map("branch_id") @db.Uuid
  country     String? @default("Iran")
  region      String?
  city        String?
  area        String?
  street      String?
  description String? @db.Text
  branches    Branch? @relation(fields: [branchId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("addresses")
}

model Backlog {
  id         String     @id @db.Uuid
  branchId   String?    @map("branch_id") @db.Uuid
  branches   Branch?    @relation(fields: [branchId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  categories Category[]

  @@map("backlog")
}

model Menu {
  id       String  @id @db.Uuid
  branchId String? @map("branch_id") @db.Uuid
  name     String?
  favicon  String? @db.Text
  branches Branch? @relation(fields: [branchId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("menus")
}

model Category {
  id            String          @id @db.Uuid
  backlogId     String?         @map("branch_id") @db.Uuid
  name          String?
  backlog       Backlog?        @relation(fields: [backlogId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  items         Item[]
  subCategories SubCategories[]

  @@map("categories")
}

model SubCategories {
  id         String    @id @db.Uuid
  categoryId String?   @map("category_id") @db.Uuid
  name       String?
  items      Item[]
  categories Category? @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("sub_categories")
}

model Item {
  id            String         @id @db.Uuid
  categoryId    String?        @map("category_id") @db.Uuid
  subCategoryId String?        @map("sub_category_id") @db.Uuid
  name          String?
  ingredients   String?        @db.Text
  categories    Category?      @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subCategories SubCategories? @relation(fields: [subCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("items")
}
